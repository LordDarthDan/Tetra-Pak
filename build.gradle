buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
        maven { url = 'https://dist.creeper.host/Sponge/maven' }
        maven { url = 'https://repo.spongepowered.org/maven' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

plugins {
    id 'com.github.gmazzo.buildconfig' version '3.0.1'
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'org.spongepowered.mixin'
apply from: 'https://raw.githubusercontent.com/LordGrimmauld/gitinfo-collect/master/build.gradle'



repositories {
    maven {
        // Location of the maven that hosts JEI files (and TiC)
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }

    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url 'https://jitpack.io/'
    }
    maven {
        // Location of the maven for mixed mappings, Registrate, and Flywheel
        name = "tterrag maven"
        url = "https://maven.tterrag.com/"
    }
    maven {
        // Maven for Tetra and mutil
        name = "blamejared maven"
        url = "https://maven.blamejared.com/"
    }
}

version = "${minecraft_version}-${mod_version}"
group = "mod.noobulus.${modid}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${modid}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: "${minecraft_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config=${modid}.mixins.json".toString()
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config=${modid}.mixins.json".toString()
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args "--mod", modid, "--all", "--output", file('src/generated/resources/'), "--existing", file('src/main/resources/')

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation fg.deobf("curse.maven:tetra-289712:4370833")
    implementation fg.deobf("curse.maven:mutil-351914:3941314")
    // implementation fg.deobf("curse.maven:harvests-571339:3640648") borked in dev?
    // implementation fg.deobf("curse.maven:create-328085:3934676")
    // implementation fg.deobf("curse.maven:flywheel-486392:3934664")
    implementation fg.deobf("curse.maven:supplementaries-412082:4369183")
    implementation fg.deobf("curse.maven:moonlightlib-499980:4368442")

    //runtimeOnly fg.deobf("curse.maven:druidcraft-340991:3177267")
    runtimeOnly fg.deobf("curse.maven:openloader-354339:3943067")
    runtimeOnly fg.deobf("curse.maven:neat-238372:3878735")
    runtimeOnly fg.deobf("curse.maven:quark-243121:4366541")
    runtimeOnly fg.deobf("curse.maven:quarkoddities-301051:3575623")
    runtimeOnly fg.deobf("curse.maven:autoreglib-250363:4100299")
    runtimeOnly fg.deobf("curse.maven:farmersdelight-398521:3999157")
    runtimeOnly fg.deobf("curse.maven:thermalexpansion-69163:4112130")
    runtimeOnly fg.deobf("curse.maven:thermalfoundation-222880:4112137")
    runtimeOnly fg.deobf("curse.maven:thermalcultivation-271835:4112131")
    runtimeOnly fg.deobf("curse.maven:thermalinnovation-291737:4112132")
    runtimeOnly fg.deobf("curse.maven:thermalintegration-626708:4112133")
    runtimeOnly fg.deobf("curse.maven:cofhcore-69162:4202944")
    /*
    runtimeOnly fg.deobf("curse.maven:eidolon-429625:3157832")
    runtimeOnly fg.deobf("curse.maven:curios-309927:3343065")
    runtimeOnly fg.deobf("curse.maven:abnormals_core-382216:3457851")
    runtimeOnly fg.deobf("curse.maven:autumnity-365045:3295700")
    runtimeOnly fg.deobf("curse.maven:upgrade_aquatic-326895:3249419")
    runtimeOnly fg.deobf("curse.maven:endergetic_expansion-291509:3154938")
    runtimeOnly fg.deobf("curse.maven:betterend_reforked-537247:3507856")
    runtimeOnly fg.deobf("curse.maven:infernal_expansion-395078:3487698")
     */

    // compileOnly fg.deobf("mezz.jei:jei-1.16.5:${jei_version}:api")
    implementation fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

    implementation fg.deobf("com.simibubi.create:create-${minecraft_version}:${create_version}:all") { transitive = false }
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${minecraft_version}:${flywheel_version}")
    compileOnly fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")

    // implementation fg.deobf("se.mickelus.mutil:mutil:${mutil_version}")
    // implementation fg.deobf("se.mickelus.tetra:tetra:${tetra_version}")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

compileJava.options.encoding = 'UTF-8'

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${modid}",
                "Specification-Vendor"    : "Noobulus",
                "Specification-Version"   : "0.1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Noobulus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "${modid}.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

mixin {
    add sourceSets.main, "${modid}.refmap.json"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

buildConfig {
    buildConfigField 'String', 'MODID', "\"${modid}\""
    buildConfigField 'String', 'VERSION', "\"${project.version}\""
    def gitstage = getGitInfo()
    println("Using git stage ${gitstage}")
    buildConfigField "String", "GITHASH", "\"${gitstage}\""
    packageName = project.group
}